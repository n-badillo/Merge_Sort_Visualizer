[{"C:\\Users\\Nancy\\Documents\\GitHub\\Binary_Search_Tree_Visualization\\red_black_tree\\src\\App.js":"1","C:\\Users\\Nancy\\Documents\\GitHub\\Binary_Search_Tree_Visualization\\red_black_tree\\src\\index.js":"2","C:\\Users\\Nancy\\Documents\\GitHub\\Binary_Search_Tree_Visualization\\red_black_tree\\src\\MergeSortVisualizer\\MergeSortVisualizer.jsx":"3","C:\\Users\\Nancy\\Documents\\GitHub\\Binary_Search_Tree_Visualization\\red_black_tree\\src\\mergeSortAlgorithm\\mergeSortAlgorithm.js":"4"},{"size":234,"mtime":1608344810523,"results":"5","hashOfConfig":"6"},{"size":500,"mtime":1608344835729,"results":"7","hashOfConfig":"6"},{"size":5294,"mtime":1608350214012,"results":"8","hashOfConfig":"6"},{"size":2325,"mtime":1608348076312,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dhl3g1",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Nancy\\Documents\\GitHub\\Binary_Search_Tree_Visualization\\red_black_tree\\src\\App.js",[],"C:\\Users\\Nancy\\Documents\\GitHub\\Binary_Search_Tree_Visualization\\red_black_tree\\src\\index.js",[],"C:\\Users\\Nancy\\Documents\\GitHub\\Binary_Search_Tree_Visualization\\red_black_tree\\src\\MergeSortVisualizer\\MergeSortVisualizer.jsx",["19","20","21"],"import React from 'react';\r\nimport { getMergeSortAnimation } from '../mergeSortAlgorithm/mergeSortAlgorithm.js';\r\nimport './MergeSortVisualizer.css';\r\n\r\n// Speed of the animation -- a higher number means it is slower (in milliseconds).\r\nconst ANIMATION_SPEED_MS = 250;\r\n\r\n// Change the amount of bars shows for any random array.\r\nconst NUMBER_OF_ARRAY_BARS = 31;\r\nconst NUMBER_OF_MIN_BARS = 8;  // this will be for responsive layouts, smallest window size of 322px\r\n\r\n// The color of the bars will change to this color when they have been sorted\r\nconst SORTED_COLOR = '#3FBCAE';\r\nconst SORTED_FONT = 'black';\r\n\r\n// This color is the color of the bars being compared\r\nconst COMPARE_COLOR = '#FF5F67';\r\nconst COMPARE_FONT = 'white';\r\n\r\nexport default class MergeSortVisualizer extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray(){\r\n        // create a blank array\r\n        const array = [];\r\n        \r\n        // iterate 100 times in a for loop \r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++){\r\n            // generate a random number between 5 and 1000 and push into empty array\r\n            array.push(randomIntFromInterval(20,500));\r\n        }\r\n\r\n        // setState of array created\r\n        this.setState({array});\r\n    }\r\n\r\n    mergeSort(){\r\n        console.log(this.state.array);\r\n        const comparingAnimation = getMergeSortAnimation(this.state.array);\r\n        for (let i = 0; i < comparingAnimation.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;  // evaluating every triple\r\n\r\n            if (isColorChange) {\r\n                const [first_bar_index, second_bar_index] = comparingAnimation[i];\r\n                const first_bar_style = arrayBars[first_bar_index].style;\r\n                const second_bar_style = arrayBars[second_bar_index].style;\r\n\r\n                // change the font color of the evaluated bar\r\n                const first_bar_font = arrayBars[first_bar_index].style;\r\n                const second_bar_font = arrayBars[second_bar_index].style;\r\n\r\n                const color = i % 3 === 0 ? COMPARE_COLOR : SORTED_COLOR;\r\n                const font_color = i % 3 === 0 ? COMPARE_FONT : SORTED_FONT;\r\n\r\n                setTimeout(() => {\r\n                first_bar_style.backgroundColor = color;\r\n                second_bar_style.backgroundColor = color;\r\n\r\n                // change the font color of the evaluated bar\r\n                first_bar_font.color = font_color;\r\n                second_bar_font.color = font_color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                const [first_bar_index, newHeight] = comparingAnimation[i];\r\n                const first_bar_style = arrayBars[first_bar_index].style;\r\n                this.state.array[i] = newHeight;\r\n                first_bar_style.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    \r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n\r\n        return(\r\n            <>\r\n                <div className=\"nav-bar\">\r\n                <div className=\"nav-left\">Merge Sort Visualizer</div>\r\n                <div className=\"nav-right\"><a href=\"https://github.com/n-badillo/Merge_Sort_Visualization\" target=\"_blank\">Project Page</a></div>\r\n                </div>\r\n                <div className=\"array-container\">\r\n                {array.map((number, idx) => (\r\n                    // displaying the bars of the array\r\n                    <div \r\n                    className=\"array-bar\" \r\n                    key={idx} \r\n                    style={{height: `${number}px`}}>\r\n                        {/* {number} */}\r\n                    </div>\r\n                ))}\r\n                </div>\r\n                <div className=\"bottom-half\">\r\n                    <div className=\"button-bar\">\r\n                        <button className=\"custom-button\" onClick={() => this.resetArray()}>Generate Random Array</button>\r\n                        <button className=\"custom-button\" onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                    </div>\r\n                    <div className=\"project-info\">\r\n                        This project was created for CPSC 335 Algorithm Engineering.  Currently updating the project so that it is responsive when the window is smaller or bigger.  <br></br>\r\n                        <b>There is a current bug where the number of the bar will not update, however its position does -- still working on a way to fix that.<br></br></b>\r\n                        Deleting the number on the bars for the final version in case I get marked off for it :] <br></br>\r\n                        This project was inspired by Cl√©ment Mihailescu's Sorting Visualizer.\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"footer-bar\">\r\n                Created by Nancy Badillo\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nfunction randomIntFromInterval(min, max){\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","C:\\Users\\Nancy\\Documents\\GitHub\\Binary_Search_Tree_Visualization\\red_black_tree\\src\\mergeSortAlgorithm\\mergeSortAlgorithm.js",[],{"ruleId":"22","severity":1,"message":"23","line":10,"column":7,"nodeType":"24","messageId":"25","endLine":10,"endColumn":25},{"ruleId":"26","severity":1,"message":"27","line":78,"column":17,"nodeType":"28","endLine":78,"endColumn":33},{"ruleId":"29","severity":1,"message":"30","line":93,"column":108,"nodeType":"31","endLine":93,"endColumn":123},"no-unused-vars","'NUMBER_OF_MIN_BARS' is assigned a value but never used.","Identifier","unusedVar","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute"]
{"version":3,"sources":["mergeSortAlgorithm/mergeSortAlgorithm.js","MergeSortVisualizer/MergeSortVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimation","array","animations","length","dupArray","slice","mergeSortHelperFunction","main_array","starting_index","ending_index","duplicate_array","middle_index","Math","floor","k","i","j","push","mergeArrays","MergeSortVisualizer","props","state","this","resetArray","min","max","random","setState","console","log","comparingAnimation","arrayBars","document","getElementsByClassName","first_bar_index","second_bar_index","first_bar_style","style","second_bar_style","first_bar_font","second_bar_font","color","font_color","setTimeout","backgroundColor","newHeight","height","className","href","target","map","number","idx","onClick","mergeSort","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.00d603da.chunk.js","sourcesContent":["export function getMergeSortAnimation(array) {\r\n   // animation code will go here\r\n\r\n   const animations = [];\r\n   if (array.length <= 1) return array; // if the array is 1, or 0, it is already sorted so return it.\r\n   const dupArray = array.slice();\r\n\r\n   mergeSortHelperFunction(array, 0, array.length - 1, dupArray, animations);\r\n   \r\n   // returning the array of animations when the function is called\r\n   return animations;\r\n  }\r\n\r\n  function mergeSortHelperFunction(   main_array,   starting_index,   ending_index,   duplicate_array,  animations ) {\r\n   if (starting_index === ending_index) return;\r\n   const middle_index = Math.floor((starting_index + ending_index) / 2);\r\n   mergeSortHelperFunction(duplicate_array, starting_index, middle_index, main_array, animations);\r\n   mergeSortHelperFunction(duplicate_array, middle_index + 1, ending_index, main_array, animations);\r\n   mergeArrays(main_array, starting_index, middle_index, ending_index, duplicate_array, animations);\r\n  }\r\n\r\n  function mergeArrays(   main_array,   starting_index,   middle_index,   ending_index,   duplicate_array,   animations ) {\r\n   let k = starting_index;\r\n   let i = starting_index;\r\n   let j = middle_index + 1;\r\n\r\n   while (i <= middle_index && j <= ending_index) {\r\n     // Changing color because comparing\r\n     animations.push([i, j]);\r\n\r\n     // Reverting color on second push\r\n     animations.push([i, j]);\r\n\r\n     if (duplicate_array[i] <= duplicate_array[j]) {\r\n       // Overwriting values from duplicate array into main array\r\n       animations.push([k, duplicate_array[i]]);\r\n       main_array[k++] = duplicate_array[i++];\r\n     } else {\r\n       // Overwrite value from main array to duplicate array\r\n       animations.push([k, duplicate_array[j]]);\r\n       main_array[k++] = duplicate_array[j++];\r\n     }\r\n   }\r\n   \r\n   while (i <= middle_index) {\r\n     \r\n      // same thing as above, but for the middle index\r\n     animations.push([i, i]);\r\n     animations.push([i, i]);\r\n     animations.push([k, duplicate_array[i]]);\r\n     main_array[k++] = duplicate_array[i++];\r\n   }\r\n\r\n   while (j <= ending_index) {\r\n     // same thing as above but for the last index\r\n     animations.push([j, j]);\r\n     animations.push([j, j]);\r\n     animations.push([k, duplicate_array[j]]);\r\n     main_array[k++] = duplicate_array[j++];\r\n   }\r\n }","import React from 'react';\r\nimport { getMergeSortAnimation } from '../mergeSortAlgorithm/mergeSortAlgorithm.js';\r\nimport './MergeSortVisualizer.css';\r\n\r\n// Speed of the animation -- a higher number means it is slower (in milliseconds).\r\nconst ANIMATION_SPEED_MS = 250;\r\n\r\n// Change the amount of bars shows for any random array.\r\nconst NUMBER_OF_ARRAY_BARS = 31;\r\nconst NUMBER_OF_MIN_BARS = 8;  // this will be for responsive layouts, smallest window size of 322px\r\n\r\n// The color of the bars will change to this color when they have been sorted\r\nconst SORTED_COLOR = '#3FBCAE';\r\nconst SORTED_FONT = 'black';\r\n\r\n// This color is the color of the bars being compared\r\nconst COMPARE_COLOR = '#FF5F67';\r\nconst COMPARE_FONT = 'white';\r\n\r\nexport default class MergeSortVisualizer extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray(){\r\n        // create a blank array\r\n        const array = [];\r\n        \r\n        // iterate 100 times in a for loop \r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++){\r\n            // generate a random number between 5 and 1000 and push into empty array\r\n            array.push(randomIntFromInterval(20,500));\r\n        }\r\n\r\n        // setState of array created\r\n        this.setState({array});\r\n    }\r\n\r\n    mergeSort(){\r\n        console.log(this.state.array);\r\n        const comparingAnimation = getMergeSortAnimation(this.state.array);\r\n        for (let i = 0; i < comparingAnimation.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;  // evaluating every triple\r\n\r\n            if (isColorChange) {\r\n                const [first_bar_index, second_bar_index] = comparingAnimation[i];\r\n                const first_bar_style = arrayBars[first_bar_index].style;\r\n                const second_bar_style = arrayBars[second_bar_index].style;\r\n\r\n                // change the font color of the evaluated bar\r\n                const first_bar_font = arrayBars[first_bar_index].style;\r\n                const second_bar_font = arrayBars[second_bar_index].style;\r\n\r\n                const color = i % 3 === 0 ? COMPARE_COLOR : SORTED_COLOR;\r\n                const font_color = i % 3 === 0 ? COMPARE_FONT : SORTED_FONT;\r\n\r\n                setTimeout(() => {\r\n                first_bar_style.backgroundColor = color;\r\n                second_bar_style.backgroundColor = color;\r\n\r\n                // change the font color of the evaluated bar\r\n                first_bar_font.color = font_color;\r\n                second_bar_font.color = font_color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                const [first_bar_index, newHeight] = comparingAnimation[i];\r\n                const first_bar_style = arrayBars[first_bar_index].style;\r\n                this.state.array[i] = newHeight;\r\n                first_bar_style.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    \r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n\r\n        return(\r\n            <>\r\n                <div className=\"nav-bar\">\r\n                <div className=\"nav-left\">Merge Sort Visualizer</div>\r\n                <div className=\"nav-right\"><a href=\"https://github.com/n-badillo/Merge_Sort_Visualization\" target=\"_blank\">Project Page</a></div>\r\n                </div>\r\n                <div className=\"array-container\">\r\n                {array.map((number, idx) => (\r\n                    // displaying the bars of the array\r\n                    <div \r\n                    className=\"array-bar\" \r\n                    key={idx} \r\n                    style={{height: `${number}px`}}>\r\n                        {/* {number} */}\r\n                    </div>\r\n                ))}\r\n                </div>\r\n                <div className=\"bottom-half\">\r\n                    <div className=\"button-bar\">\r\n                        <button className=\"custom-button\" onClick={() => this.resetArray()}>Generate Random Array</button>\r\n                        <button className=\"custom-button\" onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                    </div>\r\n                    <div className=\"project-info\">\r\n                        This project was created for CPSC 335 Algorithm Engineering.  Currently updating the project so that it is responsive when the window is smaller or bigger.  <br></br>\r\n                        <b>There is a current bug where the number of the bar will not update, however its position does -- still working on a way to fix that.<br></br></b>\r\n                        Deleting the number on the bars for the final version in case I get marked off for it :] <br></br>\r\n                        This project was inspired by Clément Mihailescu's Sorting Visualizer.\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"footer-bar\">\r\n                Created by Nancy Badillo\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nfunction randomIntFromInterval(min, max){\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","import MergeSortVisualizer from './MergeSortVisualizer/MergeSortVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n  <div className=\"App\">\n    <MergeSortVisualizer></MergeSortVisualizer>\n  </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}